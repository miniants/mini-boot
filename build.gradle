buildscript {
    ext {
        //核心组件版本
        //spring-boot+spring-cloud+alibaba-cloud版本说明https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E
        springBootVersion = '2.7.9' //文档说2.6.13，脚手架生成2.7.6
        springCloudVersion = '2021.0.1'
        springCloudAlibabaVersion = '2021.0.1.0'
        gradleReleaseVersion = '3.0.2'

        //组件版本
        lombokVersion = '1.18.26'
        mysqlConnectorVersion = '8.0.32'

        mybatisPlusVersion = '3.5.2'
        hutoolVersion = '5.8.15'
        itextpdfVersion = '5.4.2'
        kissoVersion = '3.8.3'
        disruptorVersion = '3.4.4'
        jtsVersion = '1.18.2'
        springdocVersion = '1.6.8'
        poiVersion= '4.1.2'


        // 配置 Maven 发布的仓库信息
        myRepoUrl = "http://39.100.225.51:18001/repository/stormwind-public"
        aliRepoUrl = "https://maven.aliyun.com/repository/public"
        gradleRepoUrl = 'https://plugins.gradle.org/m2/'

        myNexusRepoUrl = "http://39.100.225.51:18001/repository/stormwind"
        myNexusSnapshotsRepoUrl = "http://39.100.225.51:18001/repository/stormwind-snapshot/"
        myNexusRepoUsername = "guoqianyou"
        myNexusRepoPassword = "Gqy17949"
    }

    //设置仓库
    repositories {
        mavenLocal()
        maven {
            name "USTB"; url myRepoUrl
            allowInsecureProtocol = true
            credentials { username myNexusRepoUsername; password myNexusRepoPassword }
        }
        maven { name "Alibaba"; url aliRepoUrl }
        maven { name "gradle"; url gradleRepoUrl }
        mavenCentral()
    }
    dependencies {
        //spring-boot-gradle-plugin,方便版本管理
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "net.researchgate:gradle-release:${gradleReleaseVersion}"
        classpath "com.google.cloud.tools:jib-gradle-plugin:3.3.1"
        classpath 'org.yaml:snakeyaml:1.30'
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '5.2.0'
}

println "=====${group}版本信息(gradle.properties)："
def nextVersion = version.replaceAll(/(\d+)(?!.*\d)/) { Integer.parseInt(it[1]) + 1 }
println "当前版本：${version}；下个版本：${nextVersion}"

task tagRelease {
    description = 'Tags the current head with the project\'s version.'
    doLast {
        if(version.contains("SNAPSHOT")){
            println ("当前版本为快照版本，不能tag")
        }else {
            grgit.tag.add(name:"v${version}")
            def properties = new Properties()
            file('gradle.properties').withInputStream { properties.load(it) }
            properties.setProperty('version', "${nextVersion}")
            file('gradle.properties').withOutputStream { properties.store(it, null) }
            grgit.commit(all:true,message:"This is NewVersion v${nextVersion} Created after Release of ${version}")
            //grgit.push(all: true);
            println("=====项目版本升级：")
            println("新版本：${nextVersion}")
        }
    }
}

task pushToOrigin {
    description = 'Pushes current branch\'s committed changes to origin repo.'
    doLast {
        grgit.push()
    }
}

//全局配置,包括root和所有子项目都会继承
allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: "net.researchgate.release"
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'


    group 'cn.miniants'
    sourceCompatibility = 17
    targetCompatibility = 17

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-parameters"
    }

    repositories {
        mavenLocal()
        maven {
            name "USTB"; url myRepoUrl; allowInsecureProtocol = true
            credentials { username myNexusRepoUsername; password myNexusRepoPassword }
        }
        maven { name "Alibaba"; url aliRepoUrl }
        mavenCentral()
    }
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
        implementation "org.projectlombok:lombok:${lombokVersion}"
    }

    // 根据版本号判断是否为快照版本
    def isSnapshot = project.version.endsWith("-SNAPSHOT")
    //打包源码
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }
    // 配置发布任务
    publishing {
        // 发布的组件信息
        publications {
            myPublish(MavenPublication) {
                versionMapping {
                    from components.java
                    artifact sourcesJar
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }
            }
        }

        // 发布的仓库信息
        repositories {
            maven {
                allowInsecureProtocol true
                url isSnapshot ? myNexusSnapshotsRepoUrl : myNexusRepoUrl
                credentials { username myNexusRepoUsername; password myNexusRepoPassword }
            }
        }
    }
}

subprojects {
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    dependencies {
        annotationProcessor 'org.projectlombok:lombok' //注释处理器
        api 'org.projectlombok:lombok' //引入lombok
        api 'cn.hutool:hutool-all'
        compileOnly 'org.slf4j:slf4j-api'
    }
    dependencyManagement {
        dependencies {
            dependency "org.projectlombok:lombok:${lombokVersion}" //lombok
            dependency "mysql:mysql-connector-java:${mysqlConnectorVersion}" //mysql
            dependency "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"//数据库操作
            dependency "cn.hutool:hutool-all:${hutoolVersion}" //工具包
            dependency "com.itextpdf:itextpdf:${itextpdfVersion}" //pdf
            dependency "com.baomidou:kisso:${kissoVersion}" //单点登录
            dependency "com.lmax:disruptor:${disruptorVersion}" //高性能队列
            dependency "org.locationtech.jts:jts-core:${jtsVersion}" //空间分析
            dependency "org.springdoc:springdoc-openapi-webmvc-core:${springdocVersion}" //swagger文档生成器
            dependency "org.apache.poi:poi:${poiVersion}" //office
            dependency "org.apache.poi:poi-ooxml:${poiVersion}" //office

        }
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
    }

}

//release {
//    failOnCommitNeeded = false
//    failOnUnversionedFiles = false
//    scmAdapters = [net.researchgate.release.GitAdapter]
//    git{
//        requireBranch.set('master')
//    }
//}
tasks.named('publish').configure(t->t.dependsOn('tagRelease'))
