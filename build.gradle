// ===== root build.gradle (publish ALL subprojects to Maven Central) =====
buildscript {
    ext {
        // versions
        springBootVersion = '2.7.9'
        springCloudVersion = '2021.0.1'
        springCloudAlibabaVersion = '2021.0.1.0'

        lombokVersion = '1.18.26'
        mysqlConnectorVersion = '8.0.32'
        mybatisPlusVersion = '3.5.2'
        hutoolVersion = '5.8.15'
        itextpdfVersion = '5.4.2'
        kissoVersion = '3.8.3'
        disruptorVersion = '3.4.4'
        jtsVersion = '1.18.2'
        springdocVersion = '1.6.8'
        poiVersion = '4.1.2'

        aliRepoUrl = "https://maven.aliyun.com/repository/public"
        gradleRepoUrl = 'https://plugins.gradle.org/m2/'

        curVersion = null
        nextVersion = null
    }
    repositories {
        mavenLocal()
        maven { name "Alibaba"; url aliRepoUrl }
        maven { name "gradle";  url gradleRepoUrl }
        mavenCentral()
    }
    dependencies {
        // 如需后面再加 Boot 到“应用模块”，这个 classpath 留着没关系
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "com.google.cloud.tools:jib-gradle-plugin:3.3.1"
        classpath 'org.yaml:snakeyaml:1.30'
    }
}

plugins {
    id 'org.ajoberstar.grgit' version '5.2.0'
    id 'io.spring.dependency-management' version '1.1.6' apply false
    id 'com.vanniktech.maven.publish'    version '0.34.0' apply false
}
//这里的用户账号密码放到系统.gradle/
System.setProperty('org.ajoberstar.grgit.auth.username', 'MINIBOOT')
System.setProperty('org.ajoberstar.grgit.auth.password', 'CVDvFCc6UvVU7kNw')

allprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'   // ← 新增这一行
    apply plugin: "org.ajoberstar.grgit"
    apply plugin: 'io.spring.dependency-management'

    group = 'cn.miniants'

    java { toolchain { languageVersion = JavaLanguageVersion.of(17) } }
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
        options.compilerArgs << "-parameters"
        options.release = 17
    }

    tasks.withType(Javadoc).configureEach {
        // 这三项分别对应：读取源码、生成文档、HTML charset
        options.encoding = 'UTF-8'
        options.addStringOption('docencoding', 'UTF-8')
        options.addStringOption('charset', 'UTF-8')

        // 可选：关闭严格校验，避免中文注释的奇奇怪怪告警变错误
        options.addStringOption('Xdoclint:none', '-quiet')
        failOnError = false
    }

    repositories {
        mavenLocal()
        maven { name "Alibaba"; url aliRepoUrl }
        mavenCentral()
    }

    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
        testRuntimeOnly    'org.junit.jupiter:junit-jupiter-engine:5.9.2'
        implementation "org.projectlombok:lombok:${lombokVersion}"
    }

    test { useJUnitPlatform() }
}

subprojects {
    dependencies {
        annotationProcessor 'org.projectlombok:lombok' //注释处理器
        api 'org.projectlombok:lombok' //引入lombok
        api 'cn.hutool:hutool-all'
        compileOnly 'org.slf4j:slf4j-api'
    }
    // 统一依赖对齐
    dependencyManagement {
        dependencies {
            dependency "org.projectlombok:lombok:${lombokVersion}"
            dependency "mysql:mysql-connector-java:${mysqlConnectorVersion}"
            dependency "com.baomidou:mybatis-plus-boot-starter:${mybatisPlusVersion}"
            dependency "cn.hutool:hutool-all:${hutoolVersion}"
            dependency "com.itextpdf:itextpdf:${itextpdfVersion}"
            dependency "com.baomidou:kisso:${kissoVersion}"
            dependency "com.lmax:disruptor:${disruptorVersion}"
            dependency "org.locationtech.jts:jts-core:${jtsVersion}"
            dependency "org.springdoc:springdoc-openapi-webmvc-core:${springdocVersion}"
            dependency "org.apache.poi:poi:${poiVersion}"
            dependency "org.apache.poi:poi-ooxml:${poiVersion}"
            dependency "org.apache.poi:poi-scratchpad:${poiVersion}"
        }
        imports {
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "com.alibaba.cloud:spring-cloud-alibaba-dependencies:${springCloudAlibabaVersion}"
        }
    }

    // ★ 给所有子模块启用 Central 发布（不调用 pomFromGradleProperties，避免 final 冲突）
    apply plugin: "com.vanniktech.maven.publish"
    apply plugin: 'io.spring.dependency-management'

    mavenPublishing {
        publishToMavenCentral()
        // 只发 SNAPSHOT 可先注释掉
        signAllPublications()

        // 显式 POM，读取 gradle.properties；不改已 final 的属性
        pom {
            def gp = providers::gradleProperty
            name.set(gp("POM_NAME").orElse(project.name))
            description.set(gp("POM_DESCRIPTION").orElse(""))
            url.set(gp("POM_URL").orElse(""))

            licenses {
                license {
                    name.set(gp("POM_LICENSE_NAME").orElse("Apache-2.0"))
                    url.set(gp("POM_LICENSE_URL").orElse("https://www.apache.org/licenses/LICENSE-2.0.txt"))
                    distribution.set(gp("POM_LICENSE_DIST").orElse("repo"))
                }
            }
            scm {
                url.set(gp("POM_SCM_URL").orElse(""))
                connection.set(gp("POM_SCM_CONNECTION").orElse(""))
                developerConnection.set(gp("POM_SCM_DEV_CONNECTION").orElse(""))
            }
            developers {
                developer {
                    id.set(gp("POM_DEVELOPER_ID").orElse(""))
                    name.set(gp("POM_DEVELOPER_NAME").orElse(""))
                    url.set(gp("POM_DEVELOPER_URL").orElse(""))
                }
            }
        }
    }
}

def checkoutMaster = {
    def currentBranch = grgit.branch.current().name
    if(currentBranch != 'jwy-master'){
        println "当前分支：${currentBranch}，切换到jwy-master分支"
        grgit.checkout(branch: 'jwy-master')
    }else {
        println "当前分支：${currentBranch}"
    }
    grgit.pull()
    return true
}

def getAndUpdateVersion = {
    //获取并升级到下一个版本号
    def properties = new Properties()
    file('gradle.properties').withInputStream { properties.load(it) }
    curVersion = properties.getProperty('version')
    nextVersion = curVersion.replaceAll(/(\d+)(?!.*\d)/) { Integer.parseInt(it[1]) + 1 }
    properties.setProperty('version', "${nextVersion}")
    properties.setProperty('tagVersion', "${curVersion}")
    file('gradle.properties').withOutputStream { properties.store(it, null) }

    return true
}

def tagRelease = {
    def currentBranch = grgit.branch.current().name
    assert currentBranch == 'master': "当前分支不是 'master' 分支不能发版。"
    assert curVersion != null: "未检测到版本号"

    //提交代码
    grgit.add(patterns: ['.'])  // 添加所有更改
    grgit.commit(all: true, message: "NewVersion：v${nextVersion}，TagVersion：${curVersion}")
    //发版成功后这里先打tag
    grgit.tag.add(name: "v${curVersion}")
    grgit.push(all: true);
    println("=====项目版本升级：")
    println("新版本：${nextVersion}，Release版本：${curVersion}")

    return true;
}

task myPublishToMavenCentral {
    group = '1自己的发版'

    //dependsOn publishToMavenCentral

    doLast {
        getAndUpdateVersion()
        tagRelease()
    }
}